{"version":3,"file":"leaflet-wind.js","sources":["../../core/src/utils.ts","../../core/src/Vector.ts","../../core/src/Field.ts","../../core/src/index.ts","../src/index.ts"],"sourcesContent":["import Field from './Field';\nimport type { IField } from './Field';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst symToStringTag = typeof Symbol !== 'undefined' ? Symbol.toStringTag : undefined;\n\nfunction baseGetTag(value: any) {\n  if (value === null) {\n    return value === undefined ? '[object Undefined]' : '[object Null]';\n  }\n  if (!(symToStringTag && symToStringTag in Object(value))) {\n    return toString.call(value);\n  }\n  const isOwn = hasOwnProperty.call(value, symToStringTag);\n  const tag = value[symToStringTag];\n  let unmasked = false;\n  try {\n    value[symToStringTag] = undefined;\n    unmasked = true;\n  } catch (e) {\n    //\n  }\n\n  const result = Object.prototype.toString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport function TypeOf(value: any) {\n  return Object.prototype.toString.call(value).slice(8, -1).toLowerCase();\n}\n\n/**\n * 判断是否为函数\n * @param value\n * @returns {boolean}\n */\nexport function isFunction(value: any): value is (...args: any[]) => any {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (!isObject(value)) {\n    return false;\n  }\n  const tag = baseGetTag(value);\n  return (\n    tag === '[object Function]' ||\n    tag === '[object AsyncFunction]' ||\n    tag === '[object GeneratorFunction]' ||\n    tag === '[object Proxy]'\n  );\n}\n\n/**\n * 判断是否为对象\n * @param value\n * @returns {boolean}\n */\nexport function isObject(value: any) {\n  const type = typeof value;\n  return value !== null && (type === 'object' || type === 'function');\n}\n\n/**\n * is date value\n * @param val\n * @returns {boolean}\n */\nexport function isDate(val: any) {\n  return Object.prototype.toString.call(val) === '[object Date]';\n}\n\n/**\n * is array buffer\n * @param val\n * @returns {boolean}\n */\nexport function isArrayBuffer(val: any) {\n  return Object.prototype.toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * 判断是否为合法字符串\n * @param value\n * @returns {boolean}\n */\nexport function isString(value: any): boolean {\n  if (value == null) {\n    return false;\n  }\n  return typeof value === 'string' || (value.constructor !== null && value.constructor === String);\n}\n\n/**\n * 判断是否为数字\n * @param value\n * @returns {boolean}\n */\nexport function isNumber(value: any) {\n  return Object.prototype.toString.call(value) === '[object Number]' && !isNaN(value);\n}\n\n/**\n * 判断对象是否为空\n * @param object\n * @returns {boolean}\n */\nexport function isEmpty(object: any) {\n  let property;\n  for (property in object) {\n    return false;\n  }\n  return !property;\n}\n\n/**\n * 判断是否为 `null`\n * @param obj\n * @returns {boolean}\n */\nexport function isNull(obj: any) {\n  return obj == null;\n}\n\n/**\n * 判断是否是数组\n * @param arr\n */\nexport function isArray(arr: any): boolean {\n  return Array.isArray(arr);\n}\n\n/**\n * assign object\n * @param target\n * @param sources\n */\nexport function assign(target: object, ...sources: any[]) {\n  return Object.assign(target, ...sources);\n}\n\n/**\n * 打印⚠️信息\n * @param msg\n * @param n\n */\nexport function warnLog(msg: string, n?: string) {\n  console.warn(`${n || 'wind-layer'}: ${msg}`);\n}\n\nconst warnings = {};\n\n/**\n * 在程序运行时只打印同类型警告一次\n * @param namespaces\n * @param msg\n */\nexport function warnOnce(namespaces: string, msg: string) {\n  if (!warnings[msg]) {\n    warnLog(msg, namespaces);\n    warnings[msg] = true;\n  }\n}\n\n/**\n * Get floored division\n * @param a\n * @param n\n * @returns {Number} returns remainder of floored division,\n * i.e., floor(a / n). Useful for consistent modulo of negative numbers.\n * See http://en.wikipedia.org/wiki/Modulo_operation.\n */\nexport function floorMod(a: number, n: number) {\n  return a - n * Math.floor(a / n);\n}\n\n/**\n * 检查值是否合法\n * @param val\n * @returns {boolean}\n */\nexport function isValide(val: any) {\n  return val !== undefined && val !== null && !isNaN(val);\n}\n\nexport interface IGFSItem {\n  header: {\n    parameterCategory: number | string;\n    parameterNumber: number | string;\n    dx: number;\n    dy: number;\n    nx: number;\n    ny: number;\n    lo1: number;\n    lo2: number;\n    la1: number;\n    la2: number;\n    [key: string]: any;\n  };\n  data: number[];\n}\n\n/**\n * format gfs json to vector\n * @param data\n * @param options\n */\nexport function formatData(data: IGFSItem[], options: Partial<IField> = {}) {\n  let uComp: IGFSItem = undefined as unknown as IGFSItem;\n  let vComp: IGFSItem = undefined as unknown as IGFSItem;\n\n  if ((process.env.NODE_ENV as string) === ('development' as string)) {\n    console.time('format-data');\n  }\n\n  data.forEach(function (record: IGFSItem) {\n    switch (record.header.parameterCategory + ',' + record.header.parameterNumber) {\n      case '1,2':\n      case '2,2':\n        uComp = record;\n        break;\n      case '1,3':\n      case '2,3':\n        vComp = record;\n        break;\n    }\n  });\n\n  if (!vComp || !uComp) {\n    return undefined;\n  }\n\n  const header = uComp.header;\n  const vectorField = new Field({\n    xmin: header.lo1, // 一般格点数据是按照矩形范围来切割，所以定义其经纬度范围\n    ymin: header.la1,\n    xmax: header.lo2,\n    ymax: header.la2,\n    deltaX: header.dx, // x（经度）增量\n    deltaY: header.dy, // y（维度）增量\n    cols: header.nx, // 列（可由 `(xmax - xmin) / deltaX` 得到）\n    rows: header.ny, // 行\n    us: uComp.data, // U分量\n    vs: vComp.data, // V分量\n    ...options,\n  });\n\n  if ((process.env.NODE_ENV as string) === ('development' as string)) {\n    console.timeEnd('format-data');\n  }\n\n  return vectorField;\n}\n\n/**\n * create canvas\n * @param width\n * @param height\n * @param retina\n * @param Canvas\n * @returns {HTMLCanvasElement}\n */\nexport function createCanvas(\n  width: number,\n  height: number,\n  retina: number,\n  Canvas?: any,\n): HTMLCanvasElement {\n  if (typeof document !== 'undefined') {\n    const canvas = document.createElement('canvas');\n    canvas.width = width * retina;\n    canvas.height = height * retina;\n    return canvas;\n  } else {\n    // create a new canvas instance in node.js\n    // the canvas class needs to have a default constructor without any parameter\n    return new Canvas(width * retina, height * retina);\n  }\n}\n\n/**\n * 移除 dom\n * @param node\n * @returns {removeDomNode}\n */\nexport function removeDomNode(node: HTMLElement | HTMLCanvasElement) {\n  if (!node) {\n    return null;\n  }\n  if (node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n  return node;\n}\n\nconst keyword = /(\\D+)/;\nconst hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n// eslint-disable-next-line no-useless-escape\nconst rgba =\n  /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d.]+)\\s*)?\\)$/;\nconst colorNames: {\n  [key: string]: number[];\n} = {\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 134, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 250, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  grey: [128, 128, 128],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 221],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  rebeccapurple: [102, 51, 153],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [112, 128, 144],\n  slategrey: [112, 128, 144],\n  snow: [255, 250, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 50],\n};\n\nexport function getColor(string: string) {\n  let rgb: any[] = [];\n\n  if (string.match(hex)) {\n    let match = string.match(hex);\n\n    if (match !== null) {\n      // @ts-ignore\n      match = match[1];\n\n      for (let i = 0; i < 3; i++) {\n        // https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n        const i2 = i * 2;\n        // @ts-ignore\n        rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n      }\n\n      rgb[3] = 1;\n    }\n  } else if (string.match(rgba)) {\n    const match = string.match(rgba);\n    for (let i = 0; i < 3; i++) {\n      // @ts-ignore\n      rgb[i] = parseInt(match[i + 1], 0);\n    }\n\n    // @ts-ignore\n    if (match[4]) {\n      // @ts-ignore\n      rgb[3] = parseFloat(match[4]);\n    } else {\n      rgb[3] = 1;\n    }\n  } else if (string.match(keyword)) {\n    const match = string.match(keyword);\n    // @ts-ignore\n    if (match[1] === 'transparent') {\n      return [0, 0, 0, 0];\n    }\n    // @ts-ignore\n    rgb = colorNames[match[1]];\n    if (!rgb) {\n      return null;\n    }\n    rgb[3] = 1;\n    return rgb;\n  } else {\n    return null;\n  }\n\n  return rgb;\n}\n\nexport function compareVersion(v1, v2) {\n  // eslint-disable-next-line no-param-reassign\n  v1 = v1.split('.');\n  // eslint-disable-next-line no-param-reassign\n  v2 = v2.split('.');\n  const len = Math.max(v1.length, v2.length);\n\n  while (v1.length < len) {\n    v1.push('0');\n  }\n  while (v2.length < len) {\n    v2.push('0');\n  }\n\n  for (let i = 0; i < len; i++) {\n    const num1 = parseInt(v1[i]);\n    const num2 = parseInt(v2[i]);\n\n    if (num1 > num2) {\n      return 1;\n    } else if (num1 < num2) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n","export default class Vector {\n  public u: number;\n  public v: number;\n  public m: number;\n\n  constructor(u: number, v: number) {\n    this.u = u;\n    this.v = v;\n\n    this.m = this.magnitude();\n  }\n\n  /**\n   * 向量值（这里指风速）\n   * @returns {Number}\n   */\n  public magnitude() {\n    return Math.sqrt(this.u ** 2 + this.v ** 2);\n  }\n\n  /**\n   * 流体方向 （这里指风向，范围为0-360º）\n   * N is 0º and E is 90º\n   * @returns {Number}\n   */\n  public directionTo() {\n    const verticalAngle = Math.atan2(this.u, this.v);\n    let inDegrees = verticalAngle * (180.0 / Math.PI);\n    if (inDegrees < 0) {\n      inDegrees += 360.0;\n    }\n    return inDegrees;\n  }\n\n  /**\n   * Angle in degrees (0 to 360º) From x-->\n   * N is 0º and E is 90º\n   * @returns {Number}\n   */\n  public directionFrom() {\n    const a = this.directionTo();\n    return (a + 180.0) % 360.0;\n  }\n}\n","import { floorMod, warnOnce } from './utils';\nimport Vector from './Vector';\n\nexport interface IField {\n  /* 一般格点数据是按照矩形范围来切割，所以定义其经纬度范围 */\n  xmin: number; // 经度最小值\n  ymin: number; // 纬度最小值\n  xmax: number; // 经度最大值\n  ymax: number; // 纬度最大值\n  deltaX: number; // x（经度）增量\n  deltaY: number; // y（纬度）增量 (默认我们采用的数据和格点原始数据方向保持一致，数据从左上到右下) 但是需要注意的是此时 deltaY为 -(ymax-ymin) / rows\n  cols: number; // 列（可由 `(xmax - xmin) / deltaX` 得到）\n  rows: number; // 行\n  us: number[]; // U分量\n  vs: number[]; // V分量\n  flipY?: boolean; // 因为grib2json的问题，我们需要翻转 Y 轴数据\n  wrapX?: boolean; // 是否实现跨世界渲染\n  wrappedX?: boolean; // 当数据范围时按照 [0, 360] 时需要对x方向进行切割转换为 [-180, 180]，即将废弃\n  translateX?: boolean; // 当数据范围时按照 [0, 360] 时需要对x方向进行切割转换为 [-180, 180]\n}\n\n/**\n *\n */\nexport interface IPosition {\n  age?: number;\n  x?: number;\n  y?: number;\n  xt?: number;\n  yt?: number;\n  m?: number;\n}\n\nexport default class Field {\n  private readonly xmin: number;\n  private readonly xmax: number;\n  private readonly ymin: number;\n  private readonly ymax: number;\n  private readonly cols: number;\n  private readonly rows: number;\n  private readonly us: number[];\n  private readonly vs: number[];\n  private readonly isContinuous: boolean;\n  private readonly deltaY: number;\n  private readonly deltaX: number;\n  private readonly translateX: undefined | boolean;\n  private readonly isFields: boolean;\n  private readonly flipY: boolean;\n  public grid: (Vector | null)[][];\n  public range: (number | undefined)[] | undefined;\n  private wrapX: boolean;\n\n  constructor(params: IField) {\n    this.grid = [];\n\n    this.xmin = params.xmin;\n    this.xmax = params.xmax;\n\n    this.ymin = params.ymin;\n    this.ymax = params.ymax;\n\n    this.cols = params.cols; // 列数\n    this.rows = params.rows; // 行数\n\n    this.us = params.us; //\n    this.vs = params.vs;\n\n    this.deltaX = params.deltaX; // x 方向增量\n    this.deltaY = params.deltaY; // y方向增量\n    this.flipY = Boolean(params.flipY);\n\n    // 由于数据组织方式和deltaY的默认处理，那么在正常情况下我们需要交换 ymin 和 ymax 得到数据真实的 bbox（todo：我们需要按照真实数据来组织吗？）\n    this.ymin = Math.min(params.ymax, params.ymin);\n    this.ymax = Math.max(params.ymax, params.ymin);\n\n    // 当 deltaY < 0 时，但是数据组织是由左上到右下此时说明数据 Y 轴是反的\n    if (!(this.deltaY < 0 && this.ymin < this.ymax)) {\n      if (params.flipY === undefined) {\n        this.flipY = true;\n      }\n      console.warn('[wind-core]: The data is flipY');\n    }\n\n    /**\n     *\n     */\n    this.isFields = true;\n\n    const cols = Math.ceil((this.xmax - this.xmin) / params.deltaX); // 列\n    const rows = Math.ceil((this.ymax - this.ymin) / params.deltaY); // 行\n\n    if (cols !== this.cols || rows !== this.rows) {\n      console.warn('[wind-core]: The data grid not equal');\n    }\n\n    // 部分数据可能并不是连续的，其经度范围可能是 -180 - 179.5（比如 GFS 0.5 分辨率的）我们需要补齐最后一位\n    this.isContinuous = Math.floor(this.cols * params.deltaX) >= 360;\n    this.translateX = 'translateX' in params ? params.translateX : this.xmax > 180; // [0, 360] --> [-180, 180];\n    if ('wrappedX' in params) {\n      warnOnce(\n        '[wind-core]: ',\n        '`wrappedX` namespace will deprecated please use `translateX` instead！',\n      );\n    }\n\n    this.wrapX = Boolean(params.wrapX);\n\n    this.grid = this.buildGrid();\n    this.range = this.calculateRange();\n  }\n\n  // from https://github.com/sakitam-fdd/wind-layer/blob/95368f9433/src/windy/windy.js#L110\n  public buildGrid(): (Vector | null)[][] {\n    const grid: any[] = [];\n    let p = 0;\n\n    const { rows, cols, us, vs } = this;\n\n    for (let j = 0; j < rows; j++) {\n      const row: any[] = [];\n      for (let i = 0; i < cols; i++, p++) {\n        const u = us[p];\n        const v = vs[p];\n        const valid = this.isValid(u) && this.isValid(v);\n        row[i] = valid ? new Vector(u, v) : null;\n      }\n\n      if (this.isContinuous) {\n        row.push(row[0]);\n      }\n\n      grid[j] = row;\n    }\n    return grid;\n  }\n\n  /**\n   * release data\n   */\n  public release() {\n    this.grid = [];\n  }\n\n  /**\n   * grib data extent\n   * 格点数据范围\n   */\n  public extent() {\n    return [this.xmin, this.ymin, this.xmax, this.ymax];\n  }\n\n  /**\n   * Bilinear interpolation for Vector\n   * 针对向量进行双线性插值\n   * https://en.wikipedia.org/wiki/Bilinear_interpolation\n   * @param   {Number} x\n   * @param   {Number} y\n   * @param   {Number[]} g00\n   * @param   {Number[]} g10\n   * @param   {Number[]} g01\n   * @param   {Number[]} g11\n   * @returns {Vector}\n   */\n  private bilinearInterpolateVector(\n    x: number,\n    y: number,\n    g00: { u: number; v: number },\n    g10: { u: number; v: number },\n    g01: { u: number; v: number },\n    g11: { u: number; v: number },\n  ) {\n    const rx = 1 - x;\n    const ry = 1 - y;\n\n    const a = rx * ry;\n    const b = x * ry;\n    const c = rx * y;\n    const d = x * y;\n    const u = g00.u * a + g10.u * b + g01.u * c + g11.u * d;\n    const v = g00.v * a + g10.v * b + g01.v * c + g11.v * d;\n    return new Vector(u, v);\n  }\n\n  /**\n   * calculate vector value range\n   */\n  calculateRange() {\n    if (!this.grid || !this.grid[0]) return;\n    const rows = this.grid.length as number;\n    const cols = this.grid[0].length as number;\n\n    // const vectors = [];\n    let min;\n    let max;\n    // @from: https://stackoverflow.com/questions/13544476/how-to-find-max-and-min-in-array-using-minimum-comparisons\n    for (let j = 0; j < rows; j++) {\n      for (let i = 0; i < cols; i++) {\n        const vec = this.grid[j][i];\n\n        if (vec !== null) {\n          const val = vec.m || vec.magnitude();\n          // vectors.push();\n          if (min === undefined) {\n            min = val;\n          } else if (max === undefined) {\n            max = val;\n            // update min max\n            // 1. Pick 2 elements(a, b), compare them. (say a > b)\n            min = Math.min(min, max);\n            max = Math.max(min, max);\n          } else {\n            // 2. Update min by comparing (min, b)\n            // 3. Update max by comparing (max, a)\n            min = Math.min(val, min);\n            max = Math.max(val, max);\n          }\n        }\n      }\n    }\n    return [min, max];\n  }\n\n  /**\n   * 检查 uv是否合法\n   * @param x\n   * @private\n   */\n  public isValid(x: any) {\n    return x !== null && x !== undefined;\n  }\n\n  private getWrappedLongitudes() {\n    let xmin = this.xmin;\n    let xmax = this.xmax;\n\n    if (this.translateX) {\n      if (this.isContinuous) {\n        xmin = -180;\n        xmax = 180;\n      } else {\n        // not sure about this (just one particular case, but others...?)\n        xmax = this.xmax - 360;\n        xmin = this.xmin - 360;\n      }\n    }\n    return [xmin, xmax];\n  }\n\n  public contains(lon: number, lat: number) {\n    const [xmin, xmax] = this.getWrappedLongitudes();\n    const longitudeIn = lon >= xmin && lon <= xmax;\n    let latitudeIn;\n    if (this.deltaY >= 0) {\n      latitudeIn = lat >= this.ymin && lat <= this.ymax;\n    } else {\n      latitudeIn = lat >= this.ymax && lat <= this.ymin;\n    }\n    return longitudeIn && latitudeIn;\n  }\n\n  /**\n   * 获取经纬度所在的位置索引\n   * @param lon\n   * @param lat\n   */\n  public getDecimalIndexes(lon: number, lat: number) {\n    const i = floorMod(lon - this.xmin, 360) / this.deltaX; // calculate longitude index in wrapped range [0, 360)\n    if (this.flipY) {\n      const j = (this.ymax - lat) / this.deltaY; // calculate latitude index in direction +90 to -90\n      return [i, j];\n    } else {\n      const j = (this.ymin + lat) / this.deltaY; // calculate latitude index in direction +90 to -90\n      return [i, j];\n    }\n  }\n\n  /**\n   * Nearest value at lon-lat coordinates\n   * 线性插值\n   * @param lon\n   * @param lat\n   */\n  public valueAt(lon: number, lat: number) {\n    let flag = false;\n\n    if (this.wrapX) {\n      flag = true;\n    } else if (this.contains(lon, lat)) {\n      flag = true;\n    }\n\n    if (!flag) return null;\n\n    const indexes = this.getDecimalIndexes(lon, lat);\n    const ii = Math.floor(indexes[0]);\n    const jj = Math.floor(indexes[1]);\n\n    const ci = this.clampColumnIndex(ii);\n    const cj = this.clampRowIndex(jj);\n\n    return this.valueAtIndexes(ci, cj);\n  }\n\n  /**\n   * Get interpolated grid value lon-lat coordinates\n   * 双线性插值\n   * @param lon\n   * @param lat\n   */\n  public interpolatedValueAt(lon: number, lat: number) {\n    let flag = false;\n\n    if (this.wrapX) {\n      flag = true;\n    } else if (this.contains(lon, lat)) {\n      flag = true;\n    }\n\n    if (!flag) return null;\n\n    const [i, j] = this.getDecimalIndexes(lon, lat);\n    return this.interpolatePoint(i, j);\n  }\n\n  public hasValueAt(lon: number, lat: number) {\n    const value = this.valueAt(lon, lat);\n    return value !== null;\n  }\n\n  /**\n   * 基于向量的双线性插值\n   * @param i\n   * @param j\n   */\n  private interpolatePoint(i: number, j: number) {\n    //         1      2           After converting λ and φ to fractional grid indexes i and j, we find the\n    //        fi  i   ci          four points 'G' that enclose point (i, j). These points are at the four\n    //         | =1.4 |           corners specified by the floor and ceiling of i and j. For example, given\n    //      ---G--|---G--- fj 8   i = 1.4 and j = 8.3, the four surrounding grid points are (1, 8), (2, 8),\n    //    j ___|_ .   |           (1, 9) and (2, 9).\n    //  =8.3   |      |\n    //      ---G------G--- cj 9   Note that for wrapped grids, the first column is duplicated as the last\n    //         |      |           column, so the index ci can be used without taking a modulo.\n    const indexes = this.getFourSurroundingIndexes(i, j);\n    const [fi, ci, fj, cj] = indexes;\n    const values = this.getFourSurroundingValues(fi, ci, fj, cj);\n    if (values) {\n      const [g00, g10, g01, g11] = values;\n      // @ts-ignore\n      return this.bilinearInterpolateVector(i - fi, j - fj, g00, g10, g01, g11);\n    }\n\n    return null;\n  }\n\n  /**\n   * Check the column index is inside the field,\n   * adjusting to min or max when needed\n   * @private\n   * @param   {Number} ii - index\n   * @returns {Number} i - inside the allowed indexes\n   */\n  private clampColumnIndex(ii: number) {\n    let i = ii;\n    if (ii < 0) {\n      i = 0;\n    }\n    const maxCol = this.cols - 1;\n    if (ii > maxCol) {\n      i = maxCol;\n    }\n    return i;\n  }\n\n  /**\n   * Check the row index is inside the field,\n   * adjusting to min or max when needed\n   * @private\n   * @param   {Number} jj index\n   * @returns {Number} j - inside the allowed indexes\n   */\n  private clampRowIndex(jj: number) {\n    let j = jj;\n    if (jj < 0) {\n      j = 0;\n    }\n    const maxRow = this.rows - 1;\n    if (jj > maxRow) {\n      j = maxRow;\n    }\n    return j;\n  }\n\n  /**\n   * 计算索引位置周围的数据\n   * @private\n   * @param   {Number} i - decimal index\n   * @param   {Number} j - decimal index\n   * @returns {Array} [fi, ci, fj, cj]\n   */\n  private getFourSurroundingIndexes(i: number, j: number) {\n    const fi = Math.floor(i); // 左\n    let ci = fi + 1; // 右\n    // duplicate colum to simplify interpolation logic (wrapped value)\n    if (this.isContinuous && ci >= this.cols) {\n      ci = 0;\n    }\n    ci = this.clampColumnIndex(ci);\n\n    const fj = this.clampRowIndex(Math.floor(j)); // 上 纬度方向索引（取整）\n    const cj = this.clampRowIndex(fj + 1); // 下\n\n    return [fi, ci, fj, cj];\n  }\n\n  /**\n   * Get four surrounding values or null if not available,\n   * from 4 integer indexes\n   * @private\n   * @param   {Number} fi\n   * @param   {Number} ci\n   * @param   {Number} fj\n   * @param   {Number} cj\n   * @returns {Array}\n   */\n  private getFourSurroundingValues(fi: number, ci: number, fj: number, cj: number) {\n    let row;\n    if ((row = this.grid[fj])) {\n      const g00 = row[fi]; // << left\n      const g10 = row[ci]; // right >>\n      if (this.isValid(g00) && this.isValid(g10) && (row = this.grid[cj])) {\n        // lower row vv\n        const g01 = row[fi]; // << left\n        const g11 = row[ci]; // right >>\n        if (this.isValid(g01) && this.isValid(g11)) {\n          return [g00, g10, g01, g11]; // 4 values found!\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Value for grid indexes\n   * @param   {Number} i - column index (integer)\n   * @param   {Number} j - row index (integer)\n   * @returns {Vector|Number}\n   */\n  public valueAtIndexes(i: number, j: number) {\n    return this.grid[j][i]; // <-- j,i !!\n  }\n\n  /**\n   * Lon-Lat for grid indexes\n   * @param   {Number} i - column index (integer)\n   * @param   {Number} j - row index (integer)\n   * @returns {Number[]} [lon, lat]\n   */\n  public lonLatAtIndexes(i: number, j: number) {\n    const lon = this.longitudeAtX(i);\n    const lat = this.latitudeAtY(j);\n\n    return [lon, lat];\n  }\n\n  /**\n   * Longitude for grid-index\n   * @param   {Number} i - column index (integer)\n   * @returns {Number} longitude at the center of the cell\n   */\n  private longitudeAtX(i: number) {\n    const halfXPixel = this.deltaX / 2.0;\n    let lon = this.xmin + halfXPixel + i * this.deltaX;\n    if (this.translateX) {\n      lon = lon > 180 ? lon - 360 : lon;\n    }\n    return lon;\n  }\n\n  /**\n   * Latitude for grid-index\n   * @param   {Number} j - row index (integer)\n   * @returns {Number} latitude at the center of the cell\n   */\n  private latitudeAtY(j: number) {\n    const halfYPixel = this.deltaY / 2.0;\n    return this.ymax - halfYPixel - j * this.deltaY;\n  }\n\n  /**\n   * 生成粒子位置\n   * @param o\n   * @param width\n   * @param height\n   * @param unproject\n   * @return IPosition\n   */\n  public randomize(\n    o: IPosition = {},\n    width: number,\n    height: number,\n    unproject: (a: number[]) => [number, number] | null,\n  ) {\n    const i = (Math.random() * (width || this.cols)) | 0;\n    const j = (Math.random() * (height || this.rows)) | 0;\n\n    const coords = unproject([i, j]);\n    if (coords !== null) {\n      o.x = coords[0];\n      o.y = coords[1];\n    } else {\n      o.x = this.longitudeAtX(i);\n      o.y = this.latitudeAtY(j);\n    }\n\n    return o;\n  }\n\n  /**\n   * 判断是否是 `Field` 的实例\n   * @return boolean\n   */\n  public checkFields() {\n    return this.isFields;\n  }\n}\n","import Field from './Field';\nimport type { IField } from './Field';\nimport Vector from './Vector';\nimport { isFunction, isNumber, isString, isValide } from './utils';\n\nexport const defaultOptions = {\n  globalAlpha: 0.9, // 全局透明度\n  lineWidth: 1, // 线条宽度\n  colorScale: '#fff',\n  velocityScale: 1 / 25,\n  // particleAge: 90,\n  maxAge: 90, // alias for particleAge\n  // particleMultiplier: 1 / 300, // TODO: PATHS = Math.round(width * height * particleMultiplier);\n  paths: 800,\n  frameRate: 20,\n  useCoordsDraw: true,\n  gpet: true, // generate particle every times\n};\n\ntype emptyFunc = (v?: any) => number;\n\nexport interface IOptions {\n  globalAlpha: number; // 全局透明度\n  lineWidth: number | emptyFunc; // 线条宽度\n  colorScale: string | string[] | emptyFunc;\n  velocityScale: number | emptyFunc;\n  particleAge?: number; // 粒子在重新生成之前绘制的最大帧数\n  maxAge: number; // alias for particleAge\n  particleMultiplier?: number; // TODO: PATHS = Math.round(width * height * that.particleMultiplier);\n  paths: number | emptyFunc;\n  frameRate: number;\n  minVelocity?: number;\n  maxVelocity?: number;\n  useCoordsDraw?: boolean;\n  gpet?: boolean;\n}\n\nfunction indexFor(m: number, min: number, max: number, colorScale: string[]) {\n  // map velocity speed to a style\n  return Math.max(\n    0,\n    Math.min(\n      colorScale.length - 1,\n      Math.round(((m - min) / (max - min)) * (colorScale.length - 1)),\n    ),\n  );\n}\n\nclass WindCore {\n  public static Field = Field;\n\n  public forceStop: boolean;\n  private ctx: CanvasRenderingContext2D;\n  private options: IOptions;\n  private field: Field;\n  private particles: any[] = [];\n  private animationLoop: number;\n  private then: number;\n  private generated = false;\n\n  private starting: boolean;\n\n  constructor(ctx: CanvasRenderingContext2D, options: Partial<IOptions>, field?: Field) {\n    this.ctx = ctx;\n\n    if (!this.ctx) {\n      throw new Error('ctx error');\n    }\n\n    this.animate = this.animate.bind(this);\n\n    this.setOptions(options);\n\n    if (field) {\n      this.updateData(field);\n    }\n  }\n\n  /**\n   * 设置配置项\n   * @param options\n   */\n  public setOptions(options: Partial<IOptions>) {\n    this.options = { ...defaultOptions, ...options };\n\n    const { width, height } = this.ctx.canvas;\n\n    if ('particleAge' in options && !('maxAge' in options) && isNumber(this.options.particleAge)) {\n      // @ts-ignore\n      this.options.maxAge = this.options.particleAge;\n    }\n\n    if (\n      'particleMultiplier' in options &&\n      !('paths' in options) &&\n      isNumber(this.options.particleMultiplier)\n    ) {\n      this.options.paths = Math.round(width * height * (this.options.particleMultiplier as number));\n    }\n\n    this.prerender();\n  }\n\n  /**\n   * 获取配置项\n   */\n  public getOptions() {\n    return this.options;\n  }\n\n  /**\n   * 更新数据\n   * @param field\n   */\n  public updateData(field: Field) {\n    this.field = field;\n    if (!this.generated) {\n      return;\n    }\n    this.particles = this.prepareParticlePaths();\n  }\n\n  // @ts-ignore\n  public project(...args: any[]): [number, number] | null {\n    throw new Error('project must be overriden');\n  }\n\n  // @ts-ignore\n  public unproject(...args: any[]): [number, number] | null {\n    throw new Error('unproject must be overriden');\n  }\n\n  /**\n   * 判断位置是否在当前视窗内\n   * @param coordinates\n   */\n  public intersectsCoordinate(coordinates: [number, number]): boolean {\n    throw new Error('must be overriden');\n  }\n\n  /**\n   * 清空当前画布\n   */\n  public clearCanvas() {\n    this.stop();\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.forceStop = false;\n  }\n\n  isStop() {\n    return !this.starting;\n  }\n\n  /**\n   * 启动粒子动画\n   */\n  public start() {\n    this.starting = true;\n    this.forceStop = false;\n    this.then = Date.now();\n    this.animate();\n  }\n\n  /**\n   * 停止粒子动画\n   */\n  public stop() {\n    cancelAnimationFrame(this.animationLoop);\n    this.starting = false;\n    this.forceStop = true;\n  }\n\n  public animate() {\n    if (this.animationLoop) {\n      cancelAnimationFrame(this.animationLoop);\n    }\n    this.animationLoop = requestAnimationFrame(this.animate);\n    const now = Date.now();\n    const delta = now - this.then;\n    if (delta > this.options.frameRate) {\n      this.then = now - (delta % this.options.frameRate);\n      this.render();\n    }\n  }\n\n  /**\n   * 渲染前处理\n   */\n  public prerender() {\n    this.generated = false;\n    if (!this.field) {\n      return;\n    }\n    this.particles = this.prepareParticlePaths();\n    this.generated = true;\n\n    if (!this.starting && !this.forceStop) {\n      this.starting = true;\n      this.then = Date.now();\n      this.animate();\n    }\n  }\n\n  /**\n   * 开始渲染\n   */\n  public render() {\n    this.moveParticles();\n    this.drawParticles();\n    this.postrender();\n  }\n\n  /**\n   * each frame render end\n   */\n  public postrender() {\n    //\n  }\n\n  private moveParticles() {\n    const { width, height } = this.ctx.canvas;\n    const particles = this.particles;\n    // 清空组\n    const maxAge = this.options.maxAge;\n    const velocityScale = isFunction(this.options.velocityScale)\n      ? this.options.velocityScale()\n      : this.options.velocityScale;\n\n    let i = 0;\n    const len = particles.length;\n    for (; i < len; i++) {\n      const particle = particles[i];\n\n      if (particle.age > maxAge) {\n        particle.age = 0;\n        // restart, on a random x,y\n        this.field.randomize(particle, width, height, this.unproject);\n      }\n\n      const x = particle.x;\n      const y = particle.y;\n\n      const vector = this.field.interpolatedValueAt(x, y);\n\n      if (vector === null) {\n        particle.age = maxAge;\n      } else {\n        const xt = x + vector.u * velocityScale;\n        const yt = y + vector.v * velocityScale;\n\n        if (this.field.hasValueAt(xt, yt)) {\n          // Path from (x,y) to (xt,yt) is visible, so add this particle to the appropriate draw bucket.\n          particle.xt = xt;\n          particle.yt = yt;\n          particle.m = vector.m;\n        } else {\n          // Particle isn't visible, but it still moves through the field.\n          particle.x = xt;\n          particle.y = yt;\n          particle.age = maxAge;\n        }\n      }\n\n      particle.age++;\n    }\n  }\n\n  private fadeIn() {\n    const prev = this.ctx.globalCompositeOperation; // lighter\n    this.ctx.globalCompositeOperation = 'destination-in';\n    this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.ctx.globalCompositeOperation = prev;\n  }\n\n  private drawParticles() {\n    const particles = this.particles;\n    this.fadeIn();\n    this.ctx.globalAlpha = this.options.globalAlpha;\n\n    this.ctx.fillStyle = `rgba(0, 0, 0, ${this.options.globalAlpha})`;\n    this.ctx.lineWidth = (isNumber(this.options.lineWidth) ? this.options.lineWidth : 1) as number;\n    this.ctx.strokeStyle = (\n      isString(this.options.colorScale) ? this.options.colorScale : '#fff'\n    ) as string;\n\n    let i = 0;\n    const len = particles.length;\n    if (this.field && len > 0) {\n      let min: number;\n      let max: number;\n      // 如果配置了风速范围\n      if (isValide(this.options.minVelocity) && isValide(this.options.maxVelocity)) {\n        min = this.options.minVelocity as number;\n        max = this.options.maxVelocity as number;\n      } else {\n        // 未配置风速范围取格点数据中的最大风速和最小风速\n        [min, max] = this.field.range as [number, number];\n      }\n      for (; i < len; i++) {\n        this[this.options.useCoordsDraw ? 'drawCoordsParticle' : 'drawPixelParticle'](\n          particles[i],\n          min,\n          max,\n        );\n      }\n    }\n  }\n\n  /**\n   * 用于绘制像素粒子\n   * @param particle\n   * @param min\n   * @param max\n   */\n  private drawPixelParticle(particle: any, min: number, max: number) {\n    // TODO 需要判断粒子是否超出视野\n    // this.ctx.strokeStyle = color;\n    const pointPrev: [number, number] = [particle.x, particle.y];\n    // when xt isn't exit\n    const pointNext: [number, number] = [particle.xt, particle.yt];\n\n    if (\n      pointNext &&\n      pointPrev &&\n      isValide(pointNext[0]) &&\n      isValide(pointNext[1]) &&\n      isValide(pointPrev[0]) &&\n      isValide(pointPrev[1]) &&\n      particle.age <= this.options.maxAge\n    ) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(pointPrev[0], pointPrev[1]);\n      this.ctx.lineTo(pointNext[0], pointNext[1]);\n\n      if (isFunction(this.options.colorScale)) {\n        // @ts-ignore\n        this.ctx.strokeStyle = this.options.colorScale(particle.m) as string;\n      } else if (Array.isArray(this.options.colorScale)) {\n        const colorIdx = indexFor(particle.m, min, max, this.options.colorScale);\n        this.ctx.strokeStyle = this.options.colorScale[colorIdx];\n      }\n\n      if (isFunction(this.options.lineWidth)) {\n        // @ts-ignore\n        this.ctx.lineWidth = this.options.lineWidth(particle.m) as number;\n      }\n\n      particle.x = particle.xt;\n      particle.y = particle.yt;\n\n      this.ctx.stroke();\n    }\n  }\n\n  /**\n   * 用于绘制坐标粒子\n   * @param particle\n   * @param min\n   * @param max\n   */\n  private drawCoordsParticle(particle: any, min: number, max: number) {\n    // TODO 需要判断粒子是否超出视野\n    // this.ctx.strokeStyle = color;\n    const source: [number, number] = [particle.x, particle.y];\n    // when xt isn't exit\n    const target: [number, number] = [particle.xt, particle.yt];\n\n    if (\n      target &&\n      source &&\n      isValide(target[0]) &&\n      isValide(target[1]) &&\n      isValide(source[0]) &&\n      isValide(source[1]) &&\n      this.intersectsCoordinate(target) &&\n      particle.age <= this.options.maxAge\n    ) {\n      const pointPrev = this.project(source);\n      const pointNext = this.project(target);\n\n      if (pointPrev && pointNext) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(pointPrev[0], pointPrev[1]);\n        this.ctx.lineTo(pointNext[0], pointNext[1]);\n        particle.x = particle.xt;\n        particle.y = particle.yt;\n\n        if (isFunction(this.options.colorScale)) {\n          // @ts-ignore\n          this.ctx.strokeStyle = this.options.colorScale(particle.m) as string;\n        } else if (Array.isArray(this.options.colorScale)) {\n          const colorIdx = indexFor(particle.m, min, max, this.options.colorScale);\n          this.ctx.strokeStyle = this.options.colorScale[colorIdx];\n        }\n\n        if (isFunction(this.options.lineWidth)) {\n          // @ts-ignore\n          this.ctx.lineWidth = this.options.lineWidth(particle.m) as number;\n        }\n\n        this.ctx.stroke();\n      }\n    }\n  }\n\n  private prepareParticlePaths() {\n    // 由用户自行处理，不再自动修改粒子数\n    const { width, height } = this.ctx.canvas;\n    const particleCount =\n      typeof this.options.paths === 'function' ? this.options.paths(this) : this.options.paths;\n    const particles: any[] = [];\n    if (!this.field) {\n      return [];\n    }\n    let i = 0;\n    for (; i < particleCount; i++) {\n      particles.push(\n        this.field.randomize(\n          {\n            age: this.randomize(),\n          },\n          width,\n          height,\n          this.unproject,\n        ),\n      );\n    }\n    return particles;\n  }\n\n  private randomize() {\n    return Math.floor(Math.random() * this.options.maxAge);\n  }\n}\n\nexport * from './utils';\n\nexport { WindCore, Field, Vector, IField };\n","import * as L from 'leaflet';\nimport {\n  WindCore,\n  Field,\n  assign,\n  defaultOptions,\n  formatData,\n  isArray,\n  createCanvas,\n} from 'wind-core';\nimport type { IField, IOptions } from 'wind-core';\n\nconst WindLayer = L.Layer.extend({\n  options: {},\n\n  initialize(id: string | number, data: any, options: any) {\n    if (!id) {\n      throw Error('layer id must be specified');\n    }\n\n    this._layerId = id;\n\n    L.Util.setOptions(this, options);\n\n    this.field = null;\n\n    this._map = null;\n\n    this.pickWindOptions();\n\n    this.devicePixelRatio =\n      this.options.devicePixelRatio ||\n      // @ts-ignore\n      ((window.devicePixelRatio || window.screen.deviceXDPI / window.screen.logicalXDPI) as number);\n\n    if (data) {\n      this.setData(data, options.fieldOptions);\n    }\n  },\n\n  _createCanvas(id: string | number, zIndex: number) {\n    const layer = L.DomUtil.create('div', 'leaflet-canvas-layer');\n\n    const canvas = createCanvas(this._width, this._height, this.devicePixelRatio);\n    canvas.id = String(id);\n    canvas.style.position = 'absolute';\n    canvas.style.top = String(0);\n    canvas.style.left = String(0);\n    canvas.style.zIndex = String(zIndex);\n    canvas.style.willChange = 'transform';\n    canvas.style.width = this._width + 'px';\n    canvas.style.height = this._height + 'px';\n\n    layer.appendChild(canvas);\n\n    this._map.getPanes().overlayPane.appendChild(layer);\n\n    return {\n      layer: layer,\n      canvas: canvas,\n    };\n  },\n\n  _reset() {\n    const topLeft = this._map.containerPointToLayerPoint([0, 0]);\n    L.DomUtil.setPosition(this.canvas, topLeft);\n  },\n\n  _onResize(resizeEvent: L.ResizeEvent) {\n    this.canvas.style.width = resizeEvent.newSize.x + 'px';\n    this.canvas.style.height = resizeEvent.newSize.y + 'px';\n    this._width = resizeEvent.newSize.x;\n    this._height = resizeEvent.newSize.y;\n    this._resizeCanvas(this.devicePixelRatio);\n  },\n\n  _zoomStart() {\n    this._moveStart();\n  },\n\n  _moveStart() {\n    if (!this._updating) {\n      this._updating = true;\n    }\n  },\n\n  _animateZoom(event: L.ZoomAnimEvent) {\n    const scale = this._map.getZoomScale(event.zoom);\n\n    const offset = this._map._latLngToNewLayerPoint(\n      this._map.getBounds().getNorthWest(),\n      event.zoom,\n      event.center,\n    );\n\n    L.DomUtil.setTransform(this.canvas, offset, scale);\n  },\n\n  _resizeCanvas(scale: number) {\n    this.canvas.width = this._width * scale;\n    this.canvas.height = this._height * scale;\n  },\n\n  _render() {\n    this._reset();\n\n    const opt = this.getWindOptions();\n    if (!this.wind && this._map) {\n      const ctx = this.canvas.getContext('2d');\n      const data = this.getData();\n\n      this.wind = new WindCore(ctx, opt, data);\n\n      this.wind.project = this.project.bind(this);\n      this.wind.unproject = this.unproject.bind(this);\n      this.wind.intersectsCoordinate = this.intersectsCoordinate.bind(this);\n      this.wind.postrender = () => {\n        // @ts-ignore\n        // this.setCanvasUpdated();\n      };\n    }\n\n    this.wind.prerender();\n\n    this.wind.render();\n  },\n\n  project(coordinate: [number, number]): [number, number] {\n    const pixel = this._map.latLngToContainerPoint(new L.LatLng(coordinate[1], coordinate[0]));\n    return [pixel.x * this.devicePixelRatio, pixel.y * this.devicePixelRatio];\n  },\n\n  unproject(pixel: [number, number]): [number, number] {\n    const coordinates = this._map.containerPointToLatLng(new L.Point(pixel[0], pixel[1]));\n    return [coordinates.lng, coordinates.lat];\n  },\n\n  intersectsCoordinate(coordinate: [number, number]): boolean {\n    const bounds = this._map.getBounds();\n    return bounds.contains(L.latLng(coordinate[1], coordinate[0])) as boolean;\n  },\n\n  onAdd(map: L.Map) {\n    this._map = map;\n    this._width = map.getSize().x;\n    this._height = map.getSize().y;\n\n    const { layer, canvas } = this._createCanvas(this._layerId, this.options.zIndex || 1);\n\n    this.layer = layer;\n    this.canvas = canvas;\n\n    const animated = this._map.options.zoomAnimation && L.Browser.any3d;\n    L.DomUtil.addClass(this.canvas, 'leaflet-zoom-' + (animated ? 'animated' : 'hide'));\n\n    this._map.on(this.getEvents(), this);\n    this._render();\n  },\n\n  onRemove() {\n    if (this.wind) {\n      this.wind.stop();\n    }\n    this._map.getPanes().overlayPane.removeChild(this.layer);\n\n    this._map.off(this.getEvents(), this);\n\n    this.canvas = null;\n  },\n\n  getEvents() {\n    const events: {\n      [key: string]: any;\n    } = {\n      resize: this._onResize,\n      viewreset: this._render,\n      moveend: this._render,\n      // movestart: this._moveStart,\n      // zoomStart: this._zoomStart,\n      zoomEnd: this._render,\n      // zoomanim: undefined,\n    };\n\n    if (this._map.options.zoomAnimation && L.Browser.any3d) {\n      events.zoomanim = this._animateZoom;\n    }\n\n    return events;\n  },\n\n  pickWindOptions() {\n    Object.keys(defaultOptions).forEach((key: string) => {\n      if (key in this.options) {\n        if (this.options.windOptions === undefined) {\n          this.options.windOptions = {};\n        }\n        // @ts-ignore\n        this.options.windOptions[key] = this.options[key];\n      }\n    });\n  },\n\n  /**\n   * get wind layer data\n   */\n  getData() {\n    return this.field;\n  },\n\n  /**\n   * set layer data\n   * @param data\n   * @param options\n   * @returns {WindLayer}\n   */\n  setData(data: any, options: Partial<IField> = {}) {\n    if (data && data.checkFields && data.checkFields()) {\n      this.field = data;\n    } else if (isArray(data)) {\n      this.field = formatData(data, options);\n    } else {\n      console.error('Illegal data');\n    }\n\n    if (this.field) {\n      this?.wind?.updateData(this.field);\n    }\n    return this;\n  },\n\n  setWindOptions(options: Partial<IOptions>) {\n    const beforeOptions = this.options.windOptions || {};\n    this.options = assign(this.options, {\n      windOptions: assign(beforeOptions, options || {}),\n    });\n\n    if (this.wind) {\n      const windOptions = this.options.windOptions;\n      this.wind.setOptions(windOptions);\n      this.wind.prerender();\n    }\n  },\n\n  getWindOptions() {\n    return this.options.windOptions || {};\n  },\n});\n\nexport { Field, WindLayer };\n\nexport default WindLayer;\n"],"names":["L"],"mappings":"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"}